module cimgui_.imgui;

import bindbc.loader;
import cimgui_.types;
import cimgui_.funcs;

private
{
    SharedLib lib;
}

bool loadCImGUI()
{
     version(Windows) {
        const(char)[][1] libNames = ["cimgui.dll"];
    }
    else version(OSX) {
        const(char)[][7] libNames = [
            "libcimgui.dylib",
            "/usr/local/lib/libcimgui.dylib",
            "/usr/local/lib/libcimgui/libcimgui.dylib",
            "../Frameworks/cimgui.framework/cimgui",
            "/Library/Frameworks/cimgui.framework/cimgui",
            "/System/Library/Frameworks/cimgui.framework/cimgui",
            "/opt/local/lib/libcimgui.dylib"
        ];
    }
    else version(Posix) {
        const(char)[][8] libNames = [
			"cimgui.so",
            "/usr/local/lib/cimgui.so",
            "cimgui.so.1",
            "/usr/local/lib/cimgui.so.1",
            "libcimgui.so",
            "/usr/local/lib/libcimgui.so",
            "libcimgui.so.1",
            "/usr/local/lib/libcimgui.so.1"
        ];
    }
    else static assert(0, "bindbc-cimgui is not yet supported on this platform.");

    foreach(name; libNames) 
    {
        lib = load(name.ptr);
        if(lib != invalidHandle)
            return _load();
    }
    return false;
}

private bool _load()
{
    bool isOkay = true;
	import std.stdio;
    const size_t errs = errorCount();
    loadSymbols();
    if(errs != errorCount())
	{
        isOkay = false;
		import std.conv:to;
		foreach(err; errors)
		{
			writeln(to!string(err.message));
		}
	}
    return isOkay;
}

private void loadSymbols()
{
    CIMGUI_API ImVec2* ImVec2_ImVec2Nil(void);
    CIMGUI_API void ImVec2_destroy(ImVec2* self);
    CIMGUI_API ImVec2* ImVec2_ImVec2Float(float _x,float _y);
    CIMGUI_API ImVec4* ImVec4_ImVec4Nil(void);
    CIMGUI_API void ImVec4_destroy(ImVec4* self);
    CIMGUI_API ImVec4* ImVec4_ImVec4Float(float _x,float _y,float _z,float _w);
    CIMGUI_API ImGuiContext* igCreateContext(ImFontAtlas* shared_font_atlas);
    CIMGUI_API void igDestroyContext(ImGuiContext* ctx);
    CIMGUI_API ImGuiContext* igGetCurrentContext(void);
    CIMGUI_API void igSetCurrentContext(ImGuiContext* ctx);
    CIMGUI_API ImGuiIO* igGetIO(void);
    CIMGUI_API ImGuiStyle* igGetStyle(void);
    CIMGUI_API void igNewFrame(void);
    CIMGUI_API void igEndFrame(void);
    CIMGUI_API void igRender(void);
    CIMGUI_API ImDrawData* igGetDrawData(void);
    CIMGUI_API void igShowDemoWindow(bool* p_open);
    CIMGUI_API void igShowAboutWindow(bool* p_open);
    CIMGUI_API void igShowMetricsWindow(bool* p_open);
    CIMGUI_API void igShowStyleEditor(ImGuiStyle* ref);
    CIMGUI_API bool igShowStyleSelector(const char* label);
    CIMGUI_API void igShowFontSelector(const char* label);
    CIMGUI_API void igShowUserGuide(void);
    CIMGUI_API const char* igGetVersion(void);
    CIMGUI_API void igStyleColorsDark(ImGuiStyle* dst);
    CIMGUI_API void igStyleColorsClassic(ImGuiStyle* dst);
    CIMGUI_API void igStyleColorsLight(ImGuiStyle* dst);
    CIMGUI_API bool igBegin(const char* name,bool* p_open,ImGuiWindowFlags flags);
    CIMGUI_API void igEnd(void);
    CIMGUI_API bool igBeginChildStr(const char* str_id,const ImVec2 size,bool border,ImGuiWindowFlags flags);
    CIMGUI_API bool igBeginChildID(ImGuiID id,const ImVec2 size,bool border,ImGuiWindowFlags flags);
    CIMGUI_API void igEndChild(void);
    CIMGUI_API bool igIsWindowAppearing(void);
    CIMGUI_API bool igIsWindowCollapsed(void);
    CIMGUI_API bool igIsWindowFocused(ImGuiFocusedFlags flags);
    CIMGUI_API bool igIsWindowHovered(ImGuiHoveredFlags flags);
    CIMGUI_API ImDrawList* igGetWindowDrawList(void);
    CIMGUI_API void igGetWindowPos(ImVec2 *pOut);
    CIMGUI_API void igGetWindowSize(ImVec2 *pOut);
    CIMGUI_API float igGetWindowWidth(void);
    CIMGUI_API float igGetWindowHeight(void);
    CIMGUI_API void igSetNextWindowPos(const ImVec2 pos,ImGuiCond cond,const ImVec2 pivot);
    CIMGUI_API void igSetNextWindowSize(const ImVec2 size,ImGuiCond cond);
    CIMGUI_API void igSetNextWindowSizeConstraints(const ImVec2 size_min,const ImVec2 size_max,ImGuiSizeCallback custom_callback,void* custom_callback_data);
    CIMGUI_API void igSetNextWindowContentSize(const ImVec2 size);
    CIMGUI_API void igSetNextWindowCollapsed(bool collapsed,ImGuiCond cond);
    CIMGUI_API void igSetNextWindowFocus(void);
    CIMGUI_API void igSetNextWindowBgAlpha(float alpha);
    CIMGUI_API void igSetWindowPosVec2(const ImVec2 pos,ImGuiCond cond);
    CIMGUI_API void igSetWindowSizeVec2(const ImVec2 size,ImGuiCond cond);
    CIMGUI_API void igSetWindowCollapsedBool(bool collapsed,ImGuiCond cond);
    CIMGUI_API void igSetWindowFocusNil(void);
    CIMGUI_API void igSetWindowFontScale(float scale);
    CIMGUI_API void igSetWindowPosStr(const char* name,const ImVec2 pos,ImGuiCond cond);
    CIMGUI_API void igSetWindowSizeStr(const char* name,const ImVec2 size,ImGuiCond cond);
    CIMGUI_API void igSetWindowCollapsedStr(const char* name,bool collapsed,ImGuiCond cond);
    CIMGUI_API void igSetWindowFocusStr(const char* name);
    CIMGUI_API void igGetContentRegionMax(ImVec2 *pOut);
    CIMGUI_API void igGetContentRegionAvail(ImVec2 *pOut);
    CIMGUI_API void igGetWindowContentRegionMin(ImVec2 *pOut);
    CIMGUI_API void igGetWindowContentRegionMax(ImVec2 *pOut);
    CIMGUI_API float igGetWindowContentRegionWidth(void);
    CIMGUI_API float igGetScrollX(void);
    CIMGUI_API float igGetScrollY(void);
    CIMGUI_API float igGetScrollMaxX(void);
    CIMGUI_API float igGetScrollMaxY(void);
    CIMGUI_API void igSetScrollXFloat(float scroll_x);
    CIMGUI_API void igSetScrollYFloat(float scroll_y);
    CIMGUI_API void igSetScrollHereX(float center_x_ratio);
    CIMGUI_API void igSetScrollHereY(float center_y_ratio);
    CIMGUI_API void igSetScrollFromPosXFloat(float local_x,float center_x_ratio);
    CIMGUI_API void igSetScrollFromPosYFloat(float local_y,float center_y_ratio);
    CIMGUI_API void igPushFont(ImFont* font);
    CIMGUI_API void igPopFont(void);
    CIMGUI_API void igPushStyleColorU32(ImGuiCol idx,ImU32 col);
    CIMGUI_API void igPushStyleColorVec4(ImGuiCol idx,const ImVec4 col);
    CIMGUI_API void igPopStyleColor(int count);
    CIMGUI_API void igPushStyleVarFloat(ImGuiStyleVar idx,float val);
    CIMGUI_API void igPushStyleVarVec2(ImGuiStyleVar idx,const ImVec2 val);
    CIMGUI_API void igPopStyleVar(int count);
    CIMGUI_API const ImVec4* igGetStyleColorVec4(ImGuiCol idx);
    CIMGUI_API ImFont* igGetFont(void);
    CIMGUI_API float igGetFontSize(void);
    CIMGUI_API void igGetFontTexUvWhitePixel(ImVec2 *pOut);
    CIMGUI_API ImU32 igGetColorU32Col(ImGuiCol idx,float alpha_mul);
    CIMGUI_API ImU32 igGetColorU32Vec4(const ImVec4 col);
    CIMGUI_API ImU32 igGetColorU32U32(ImU32 col);
    CIMGUI_API void igPushItemWidth(float item_width);
    CIMGUI_API void igPopItemWidth(void);
    CIMGUI_API void igSetNextItemWidth(float item_width);
    CIMGUI_API float igCalcItemWidth(void);
    CIMGUI_API void igPushTextWrapPos(float wrap_local_pos_x);
    CIMGUI_API void igPopTextWrapPos(void);
    CIMGUI_API void igPushAllowKeyboardFocus(bool allow_keyboard_focus);
    CIMGUI_API void igPopAllowKeyboardFocus(void);
    CIMGUI_API void igPushButtonRepeat(bool repeat);
    CIMGUI_API void igPopButtonRepeat(void);
    CIMGUI_API void igSeparator(void);
    CIMGUI_API void igSameLine(float offset_from_start_x,float spacing);
    CIMGUI_API void igNewLine(void);
    CIMGUI_API void igSpacing(void);
    CIMGUI_API void igDummy(const ImVec2 size);
    CIMGUI_API void igIndent(float indent_w);
    CIMGUI_API void igUnindent(float indent_w);
    CIMGUI_API void igBeginGroup(void);
    CIMGUI_API void igEndGroup(void);
    CIMGUI_API void igGetCursorPos(ImVec2 *pOut);
    CIMGUI_API float igGetCursorPosX(void);
    CIMGUI_API float igGetCursorPosY(void);
    CIMGUI_API void igSetCursorPos(const ImVec2 local_pos);
    CIMGUI_API void igSetCursorPosX(float local_x);
    CIMGUI_API void igSetCursorPosY(float local_y);
    CIMGUI_API void igGetCursorStartPos(ImVec2 *pOut);
    CIMGUI_API void igGetCursorScreenPos(ImVec2 *pOut);
    CIMGUI_API void igSetCursorScreenPos(const ImVec2 pos);
    CIMGUI_API void igAlignTextToFramePadding(void);
    CIMGUI_API float igGetTextLineHeight(void);
    CIMGUI_API float igGetTextLineHeightWithSpacing(void);
    CIMGUI_API float igGetFrameHeight(void);
    CIMGUI_API float igGetFrameHeightWithSpacing(void);
    CIMGUI_API void igPushIDStr(const char* str_id);
    CIMGUI_API void igPushIDStrStr(const char* str_id_begin,const char* str_id_end);
    CIMGUI_API void igPushIDPtr(const void* ptr_id);
    CIMGUI_API void igPushIDInt(int int_id);
    CIMGUI_API void igPopID(void);
    CIMGUI_API ImGuiID igGetIDStr(const char* str_id);
    CIMGUI_API ImGuiID igGetIDStrStr(const char* str_id_begin,const char* str_id_end);
    CIMGUI_API ImGuiID igGetIDPtr(const void* ptr_id);
    CIMGUI_API void igTextUnformatted(const char* text,const char* text_end);
    CIMGUI_API void igText(const char* fmt,...);
    CIMGUI_API void igTextV(const char* fmt,va_list args);
    CIMGUI_API void igTextColored(const ImVec4 col,const char* fmt,...);
    CIMGUI_API void igTextColoredV(const ImVec4 col,const char* fmt,va_list args);
    CIMGUI_API void igTextDisabled(const char* fmt,...);
    CIMGUI_API void igTextDisabledV(const char* fmt,va_list args);
    CIMGUI_API void igTextWrapped(const char* fmt,...);
    CIMGUI_API void igTextWrappedV(const char* fmt,va_list args);
    CIMGUI_API void igLabelText(const char* label,const char* fmt,...);
    CIMGUI_API void igLabelTextV(const char* label,const char* fmt,va_list args);
    CIMGUI_API void igBulletText(const char* fmt,...);
    CIMGUI_API void igBulletTextV(const char* fmt,va_list args);
    CIMGUI_API bool igButton(const char* label,const ImVec2 size);
    CIMGUI_API bool igSmallButton(const char* label);
    CIMGUI_API bool igInvisibleButton(const char* str_id,const ImVec2 size,ImGuiButtonFlags flags);
    CIMGUI_API bool igArrowButton(const char* str_id,ImGuiDir dir);
    CIMGUI_API void igImage(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col,const ImVec4 border_col);
    CIMGUI_API bool igImageButton(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,int frame_padding,const ImVec4 bg_col,const ImVec4 tint_col);
    CIMGUI_API bool igCheckbox(const char* label,bool* v);
    CIMGUI_API bool igCheckboxFlags(const char* label,unsigned int* flags,unsigned int flags_value);
    CIMGUI_API bool igRadioButtonBool(const char* label,bool active);
    CIMGUI_API bool igRadioButtonIntPtr(const char* label,int* v,int v_button);
    CIMGUI_API void igProgressBar(float fraction,const ImVec2 size_arg,const char* overlay);
    CIMGUI_API void igBullet(void);
    CIMGUI_API bool igBeginCombo(const char* label,const char* preview_value,ImGuiComboFlags flags);
    CIMGUI_API void igEndCombo(void);
    CIMGUI_API bool igComboStr_arr(const char* label,int* current_item,const char* const items[],int items_count,int popup_max_height_in_items);
    CIMGUI_API bool igComboStr(const char* label,int* current_item,const char* items_separated_by_zeros,int popup_max_height_in_items);
    CIMGUI_API bool igComboFnBoolPtr(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int popup_max_height_in_items);
    CIMGUI_API bool igDragFloat(const char* label,float* v,float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igDragFloat2(const char* label,float v[2],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igDragFloat3(const char* label,float v[3],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igDragFloat4(const char* label,float v[4],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igDragFloatRange2(const char* label,float* v_current_min,float* v_current_max,float v_speed,float v_min,float v_max,const char* format,const char* format_max,ImGuiSliderFlags flags);
    CIMGUI_API bool igDragInt(const char* label,int* v,float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igDragInt2(const char* label,int v[2],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igDragInt3(const char* label,int v[3],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igDragInt4(const char* label,int v[4],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igDragIntRange2(const char* label,int* v_current_min,int* v_current_max,float v_speed,int v_min,int v_max,const char* format,const char* format_max,ImGuiSliderFlags flags);
    CIMGUI_API bool igDragScalar(const char* label,ImGuiDataType data_type,void* p_data,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igDragScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igSliderFloat(const char* label,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igSliderFloat2(const char* label,float v[2],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igSliderFloat3(const char* label,float v[3],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igSliderFloat4(const char* label,float v[4],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igSliderAngle(const char* label,float* v_rad,float v_degrees_min,float v_degrees_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igSliderInt(const char* label,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igSliderInt2(const char* label,int v[2],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igSliderInt3(const char* label,int v[3],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igSliderInt4(const char* label,int v[4],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igSliderScalar(const char* label,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igSliderScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igVSliderFloat(const char* label,const ImVec2 size,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igVSliderInt(const char* label,const ImVec2 size,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igVSliderScalar(const char* label,const ImVec2 size,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igInputText(const char* label,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
    CIMGUI_API bool igInputTextMultiline(const char* label,char* buf,size_t buf_size,const ImVec2 size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
    CIMGUI_API bool igInputTextWithHint(const char* label,const char* hint,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
    CIMGUI_API bool igInputFloat(const char* label,float* v,float step,float step_fast,const char* format,ImGuiInputTextFlags flags);
    CIMGUI_API bool igInputFloat2(const char* label,float v[2],const char* format,ImGuiInputTextFlags flags);
    CIMGUI_API bool igInputFloat3(const char* label,float v[3],const char* format,ImGuiInputTextFlags flags);
    CIMGUI_API bool igInputFloat4(const char* label,float v[4],const char* format,ImGuiInputTextFlags flags);
    CIMGUI_API bool igInputInt(const char* label,int* v,int step,int step_fast,ImGuiInputTextFlags flags);
    CIMGUI_API bool igInputInt2(const char* label,int v[2],ImGuiInputTextFlags flags);
    CIMGUI_API bool igInputInt3(const char* label,int v[3],ImGuiInputTextFlags flags);
    CIMGUI_API bool igInputInt4(const char* label,int v[4],ImGuiInputTextFlags flags);
    CIMGUI_API bool igInputDouble(const char* label,double* v,double step,double step_fast,const char* format,ImGuiInputTextFlags flags);
    CIMGUI_API bool igInputScalar(const char* label,ImGuiDataType data_type,void* p_data,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags);
    CIMGUI_API bool igInputScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags);
    CIMGUI_API bool igColorEdit3(const char* label,float col[3],ImGuiColorEditFlags flags);
    CIMGUI_API bool igColorEdit4(const char* label,float col[4],ImGuiColorEditFlags flags);
    CIMGUI_API bool igColorPicker3(const char* label,float col[3],ImGuiColorEditFlags flags);
    CIMGUI_API bool igColorPicker4(const char* label,float col[4],ImGuiColorEditFlags flags,const float* ref_col);
    CIMGUI_API bool igColorButton(const char* desc_id,const ImVec4 col,ImGuiColorEditFlags flags,ImVec2 size);
    CIMGUI_API void igSetColorEditOptions(ImGuiColorEditFlags flags);
    CIMGUI_API bool igTreeNodeStr(const char* label);
    CIMGUI_API bool igTreeNodeStrStr(const char* str_id,const char* fmt,...);
    CIMGUI_API bool igTreeNodePtr(const void* ptr_id,const char* fmt,...);
    CIMGUI_API bool igTreeNodeVStr(const char* str_id,const char* fmt,va_list args);
    CIMGUI_API bool igTreeNodeVPtr(const void* ptr_id,const char* fmt,va_list args);
    CIMGUI_API bool igTreeNodeExStr(const char* label,ImGuiTreeNodeFlags flags);
    CIMGUI_API bool igTreeNodeExStrStr(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,...);
    CIMGUI_API bool igTreeNodeExPtr(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,...);
    CIMGUI_API bool igTreeNodeExVStr(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args);
    CIMGUI_API bool igTreeNodeExVPtr(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args);
    CIMGUI_API void igTreePushStr(const char* str_id);
    CIMGUI_API void igTreePushPtr(const void* ptr_id);
    CIMGUI_API void igTreePop(void);
    CIMGUI_API float igGetTreeNodeToLabelSpacing(void);
    CIMGUI_API bool igCollapsingHeaderTreeNodeFlags(const char* label,ImGuiTreeNodeFlags flags);
    CIMGUI_API bool igCollapsingHeaderBoolPtr(const char* label,bool* p_open,ImGuiTreeNodeFlags flags);
    CIMGUI_API void igSetNextItemOpen(bool is_open,ImGuiCond cond);
    CIMGUI_API bool igSelectableBool(const char* label,bool selected,ImGuiSelectableFlags flags,const ImVec2 size);
    CIMGUI_API bool igSelectableBoolPtr(const char* label,bool* p_selected,ImGuiSelectableFlags flags,const ImVec2 size);
    CIMGUI_API bool igListBoxStr_arr(const char* label,int* current_item,const char* const items[],int items_count,int height_in_items);
    CIMGUI_API bool igListBoxFnBoolPtr(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int height_in_items);
    CIMGUI_API bool igListBoxHeaderVec2(const char* label,const ImVec2 size);
    CIMGUI_API bool igListBoxHeaderInt(const char* label,int items_count,int height_in_items);
    CIMGUI_API void igListBoxFooter(void);
    CIMGUI_API void igPlotLinesFloatPtr(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
    CIMGUI_API void igPlotLinesFnFloatPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
    CIMGUI_API void igPlotHistogramFloatPtr(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
    CIMGUI_API void igPlotHistogramFnFloatPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
    CIMGUI_API void igValueBool(const char* prefix,bool b);
    CIMGUI_API void igValueInt(const char* prefix,int v);
    CIMGUI_API void igValueUint(const char* prefix,unsigned int v);
    CIMGUI_API void igValueFloat(const char* prefix,float v,const char* float_format);
    CIMGUI_API bool igBeginMenuBar(void);
    CIMGUI_API void igEndMenuBar(void);
    CIMGUI_API bool igBeginMainMenuBar(void);
    CIMGUI_API void igEndMainMenuBar(void);
    CIMGUI_API bool igBeginMenu(const char* label,bool enabled);
    CIMGUI_API void igEndMenu(void);
    CIMGUI_API bool igMenuItemBool(const char* label,const char* shortcut,bool selected,bool enabled);
    CIMGUI_API bool igMenuItemBoolPtr(const char* label,const char* shortcut,bool* p_selected,bool enabled);
    CIMGUI_API void igBeginTooltip(void);
    CIMGUI_API void igEndTooltip(void);
    CIMGUI_API void igSetTooltip(const char* fmt,...);
    CIMGUI_API void igSetTooltipV(const char* fmt,va_list args);
    CIMGUI_API bool igBeginPopup(const char* str_id,ImGuiWindowFlags flags);
    CIMGUI_API bool igBeginPopupModal(const char* name,bool* p_open,ImGuiWindowFlags flags);
    CIMGUI_API void igEndPopup(void);
    CIMGUI_API void igOpenPopup(const char* str_id,ImGuiPopupFlags popup_flags);
    CIMGUI_API bool igOpenPopupContextItem(const char* str_id,ImGuiPopupFlags popup_flags);
    CIMGUI_API void igCloseCurrentPopup(void);
    CIMGUI_API bool igBeginPopupContextItem(const char* str_id,ImGuiPopupFlags popup_flags);
    CIMGUI_API bool igBeginPopupContextWindow(const char* str_id,ImGuiPopupFlags popup_flags);
    CIMGUI_API bool igBeginPopupContextVoid(const char* str_id,ImGuiPopupFlags popup_flags);
    CIMGUI_API bool igIsPopupOpenStr(const char* str_id,ImGuiPopupFlags flags);
    CIMGUI_API void igColumns(int count,const char* id,bool border);
    CIMGUI_API void igNextColumn(void);
    CIMGUI_API int igGetColumnIndex(void);
    CIMGUI_API float igGetColumnWidth(int column_index);
    CIMGUI_API void igSetColumnWidth(int column_index,float width);
    CIMGUI_API float igGetColumnOffset(int column_index);
    CIMGUI_API void igSetColumnOffset(int column_index,float offset_x);
    CIMGUI_API int igGetColumnsCount(void);
    CIMGUI_API bool igBeginTabBar(const char* str_id,ImGuiTabBarFlags flags);
    CIMGUI_API void igEndTabBar(void);
    CIMGUI_API bool igBeginTabItem(const char* label,bool* p_open,ImGuiTabItemFlags flags);
    CIMGUI_API void igEndTabItem(void);
    CIMGUI_API void igSetTabItemClosed(const char* tab_or_docked_window_label);
    CIMGUI_API void igLogToTTY(int auto_open_depth);
    CIMGUI_API void igLogToFile(int auto_open_depth,const char* filename);
    CIMGUI_API void igLogToClipboard(int auto_open_depth);
    CIMGUI_API void igLogFinish(void);
    CIMGUI_API void igLogButtons(void);
    CIMGUI_API bool igBeginDragDropSource(ImGuiDragDropFlags flags);
    CIMGUI_API bool igSetDragDropPayload(const char* type,const void* data,size_t sz,ImGuiCond cond);
    CIMGUI_API void igEndDragDropSource(void);
    CIMGUI_API bool igBeginDragDropTarget(void);
    CIMGUI_API const ImGuiPayload* igAcceptDragDropPayload(const char* type,ImGuiDragDropFlags flags);
    CIMGUI_API void igEndDragDropTarget(void);
    CIMGUI_API const ImGuiPayload* igGetDragDropPayload(void);
    CIMGUI_API void igPushClipRect(const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect);
    CIMGUI_API void igPopClipRect(void);
    CIMGUI_API void igSetItemDefaultFocus(void);
    CIMGUI_API void igSetKeyboardFocusHere(int offset);
    CIMGUI_API bool igIsItemHovered(ImGuiHoveredFlags flags);
    CIMGUI_API bool igIsItemActive(void);
    CIMGUI_API bool igIsItemFocused(void);
    CIMGUI_API bool igIsItemClicked(ImGuiMouseButton mouse_button);
    CIMGUI_API bool igIsItemVisible(void);
    CIMGUI_API bool igIsItemEdited(void);
    CIMGUI_API bool igIsItemActivated(void);
    CIMGUI_API bool igIsItemDeactivated(void);
    CIMGUI_API bool igIsItemDeactivatedAfterEdit(void);
    CIMGUI_API bool igIsItemToggledOpen(void);
    CIMGUI_API bool igIsAnyItemHovered(void);
    CIMGUI_API bool igIsAnyItemActive(void);
    CIMGUI_API bool igIsAnyItemFocused(void);
    CIMGUI_API void igGetItemRectMin(ImVec2 *pOut);
    CIMGUI_API void igGetItemRectMax(ImVec2 *pOut);
    CIMGUI_API void igGetItemRectSize(ImVec2 *pOut);
    CIMGUI_API void igSetItemAllowOverlap(void);
    CIMGUI_API bool igIsRectVisibleNil(const ImVec2 size);
    CIMGUI_API bool igIsRectVisibleVec2(const ImVec2 rect_min,const ImVec2 rect_max);
    CIMGUI_API double igGetTime(void);
    CIMGUI_API int igGetFrameCount(void);
    CIMGUI_API ImDrawList* igGetBackgroundDrawList(void);
    CIMGUI_API ImDrawList* igGetForegroundDrawListNil(void);
    CIMGUI_API ImDrawListSharedData* igGetDrawListSharedData(void);
    CIMGUI_API const char* igGetStyleColorName(ImGuiCol idx);
    CIMGUI_API void igSetStateStorage(ImGuiStorage* storage);
    CIMGUI_API ImGuiStorage* igGetStateStorage(void);
    CIMGUI_API void igCalcListClipping(int items_count,float items_height,int* out_items_display_start,int* out_items_display_end);
    CIMGUI_API bool igBeginChildFrame(ImGuiID id,const ImVec2 size,ImGuiWindowFlags flags);
    CIMGUI_API void igEndChildFrame(void);
    CIMGUI_API void igCalcTextSize(ImVec2 *pOut,const char* text,const char* text_end,bool hide_text_after_double_hash,float wrap_width);
    CIMGUI_API void igColorConvertU32ToFloat4(ImVec4 *pOut,ImU32 in);
    CIMGUI_API ImU32 igColorConvertFloat4ToU32(const ImVec4 in);
    CIMGUI_API void igColorConvertRGBtoHSV(float r,float g,float b,float* out_h,float* out_s,float* out_v);
    CIMGUI_API void igColorConvertHSVtoRGB(float h,float s,float v,float* out_r,float* out_g,float* out_b);
    CIMGUI_API int igGetKeyIndex(ImGuiKey imgui_key);
    CIMGUI_API bool igIsKeyDown(int user_key_index);
    CIMGUI_API bool igIsKeyPressed(int user_key_index,bool repeat);
    CIMGUI_API bool igIsKeyReleased(int user_key_index);
    CIMGUI_API int igGetKeyPressedAmount(int key_index,float repeat_delay,float rate);
    CIMGUI_API void igCaptureKeyboardFromApp(bool want_capture_keyboard_value);
    CIMGUI_API bool igIsMouseDown(ImGuiMouseButton button);
    CIMGUI_API bool igIsMouseClicked(ImGuiMouseButton button,bool repeat);
    CIMGUI_API bool igIsMouseReleased(ImGuiMouseButton button);
    CIMGUI_API bool igIsMouseDoubleClicked(ImGuiMouseButton button);
    CIMGUI_API bool igIsMouseHoveringRect(const ImVec2 r_min,const ImVec2 r_max,bool clip);
    CIMGUI_API bool igIsMousePosValid(const ImVec2* mouse_pos);
    CIMGUI_API bool igIsAnyMouseDown(void);
    CIMGUI_API void igGetMousePos(ImVec2 *pOut);
    CIMGUI_API void igGetMousePosOnOpeningCurrentPopup(ImVec2 *pOut);
    CIMGUI_API bool igIsMouseDragging(ImGuiMouseButton button,float lock_threshold);
    CIMGUI_API void igGetMouseDragDelta(ImVec2 *pOut,ImGuiMouseButton button,float lock_threshold);
    CIMGUI_API void igResetMouseDragDelta(ImGuiMouseButton button);
    CIMGUI_API ImGuiMouseCursor igGetMouseCursor(void);
    CIMGUI_API void igSetMouseCursor(ImGuiMouseCursor cursor_type);
    CIMGUI_API void igCaptureMouseFromApp(bool want_capture_mouse_value);
    CIMGUI_API const char* igGetClipboardText(void);
    CIMGUI_API void igSetClipboardText(const char* text);
    CIMGUI_API void igLoadIniSettingsFromDisk(const char* ini_filename);
    CIMGUI_API void igLoadIniSettingsFromMemory(const char* ini_data,size_t ini_size);
    CIMGUI_API void igSaveIniSettingsToDisk(const char* ini_filename);
    CIMGUI_API const char* igSaveIniSettingsToMemory(size_t* out_ini_size);
    CIMGUI_API bool igDebugCheckVersionAndDataLayout(const char* version_str,size_t sz_io,size_t sz_style,size_t sz_vec2,size_t sz_vec4,size_t sz_drawvert,size_t sz_drawidx);
    CIMGUI_API void igSetAllocatorFunctions(void*(*alloc_func)(size_t sz,void* user_data),void(*free_func)(void* ptr,void* user_data),void* user_data);
    CIMGUI_API void* igMemAlloc(size_t size);
    CIMGUI_API void igMemFree(void* ptr);
    CIMGUI_API ImGuiStyle* ImGuiStyle_ImGuiStyle(void);
    CIMGUI_API void ImGuiStyle_destroy(ImGuiStyle* self);
    CIMGUI_API void ImGuiStyle_ScaleAllSizes(ImGuiStyle* self,float scale_factor);
    CIMGUI_API void ImGuiIO_AddInputCharacter(ImGuiIO* self,unsigned int c);
    CIMGUI_API void ImGuiIO_AddInputCharacterUTF16(ImGuiIO* self,ImWchar16 c);
    CIMGUI_API void ImGuiIO_AddInputCharactersUTF8(ImGuiIO* self,const char* str);
    CIMGUI_API void ImGuiIO_ClearInputCharacters(ImGuiIO* self);
    CIMGUI_API ImGuiIO* ImGuiIO_ImGuiIO(void);
    CIMGUI_API void ImGuiIO_destroy(ImGuiIO* self);
    CIMGUI_API ImGuiInputTextCallbackData* ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(void);
    CIMGUI_API void ImGuiInputTextCallbackData_destroy(ImGuiInputTextCallbackData* self);
    CIMGUI_API void ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData* self,int pos,int bytes_count);
    CIMGUI_API void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData* self,int pos,const char* text,const char* text_end);
    CIMGUI_API bool ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData* self);
    CIMGUI_API ImGuiPayload* ImGuiPayload_ImGuiPayload(void);
    CIMGUI_API void ImGuiPayload_destroy(ImGuiPayload* self);
    CIMGUI_API void ImGuiPayload_Clear(ImGuiPayload* self);
    CIMGUI_API bool ImGuiPayload_IsDataType(ImGuiPayload* self,const char* type);
    CIMGUI_API bool ImGuiPayload_IsPreview(ImGuiPayload* self);
    CIMGUI_API bool ImGuiPayload_IsDelivery(ImGuiPayload* self);
    CIMGUI_API ImGuiOnceUponAFrame* ImGuiOnceUponAFrame_ImGuiOnceUponAFrame(void);
    CIMGUI_API void ImGuiOnceUponAFrame_destroy(ImGuiOnceUponAFrame* self);
    CIMGUI_API ImGuiTextFilter* ImGuiTextFilter_ImGuiTextFilter(const char* default_filter);
    CIMGUI_API void ImGuiTextFilter_destroy(ImGuiTextFilter* self);
    CIMGUI_API bool ImGuiTextFilter_Draw(ImGuiTextFilter* self,const char* label,float width);
    CIMGUI_API bool ImGuiTextFilter_PassFilter(ImGuiTextFilter* self,const char* text,const char* text_end);
    CIMGUI_API void ImGuiTextFilter_Build(ImGuiTextFilter* self);
    CIMGUI_API void ImGuiTextFilter_Clear(ImGuiTextFilter* self);
    CIMGUI_API bool ImGuiTextFilter_IsActive(ImGuiTextFilter* self);
    CIMGUI_API ImGuiTextRange* ImGuiTextRange_ImGuiTextRangeNil(void);
    CIMGUI_API void ImGuiTextRange_destroy(ImGuiTextRange* self);
    CIMGUI_API ImGuiTextRange* ImGuiTextRange_ImGuiTextRangeStr(const char* _b,const char* _e);
    CIMGUI_API bool ImGuiTextRange_empty(ImGuiTextRange* self);
    CIMGUI_API void ImGuiTextRange_split(ImGuiTextRange* self,char separator,ImVector_ImGuiTextRange* out);
    CIMGUI_API ImGuiTextBuffer* ImGuiTextBuffer_ImGuiTextBuffer(void);
    CIMGUI_API void ImGuiTextBuffer_destroy(ImGuiTextBuffer* self);
    CIMGUI_API const char* ImGuiTextBuffer_begin(ImGuiTextBuffer* self);
    CIMGUI_API const char* ImGuiTextBuffer_end(ImGuiTextBuffer* self);
    CIMGUI_API int ImGuiTextBuffer_size(ImGuiTextBuffer* self);
    CIMGUI_API bool ImGuiTextBuffer_empty(ImGuiTextBuffer* self);
    CIMGUI_API void ImGuiTextBuffer_clear(ImGuiTextBuffer* self);
    CIMGUI_API void ImGuiTextBuffer_reserve(ImGuiTextBuffer* self,int capacity);
    CIMGUI_API const char* ImGuiTextBuffer_c_str(ImGuiTextBuffer* self);
    CIMGUI_API void ImGuiTextBuffer_append(ImGuiTextBuffer* self,const char* str,const char* str_end);
    CIMGUI_API void ImGuiTextBuffer_appendfv(ImGuiTextBuffer* sel,fconst char* fmt,va_list args);
    CIMGUI_API ImGuiStoragePair* ImGuiStoragePair_ImGuiStoragePairInt(ImGuiID _key,int _val_i);
    CIMGUI_API void ImGuiStoragePair_destroy(ImGuiStoragePair* self);
    CIMGUI_API ImGuiStoragePair* ImGuiStoragePair_ImGuiStoragePairFloat(ImGuiID _key,float _val_f);
    CIMGUI_API ImGuiStoragePair* ImGuiStoragePair_ImGuiStoragePairPtr(ImGuiID _key,void* _val_p);
    CIMGUI_API void ImGuiStorage_Clear(ImGuiStorage* self);
    CIMGUI_API int ImGuiStorage_GetInt(ImGuiStorage* self,ImGuiID key,int default_val);
    CIMGUI_API void ImGuiStorage_SetInt(ImGuiStorage* self,ImGuiID key,int val);
    CIMGUI_API bool ImGuiStorage_GetBool(ImGuiStorage* self,ImGuiID key,bool default_val);
    CIMGUI_API void ImGuiStorage_SetBool(ImGuiStorage* self,ImGuiID key,bool val);
    CIMGUI_API float ImGuiStorage_GetFloat(ImGuiStorage* self,ImGuiID key,float default_val);
    CIMGUI_API void ImGuiStorage_SetFloat(ImGuiStorage* self,ImGuiID key,float val);
    CIMGUI_API void* ImGuiStorage_GetVoidPtr(ImGuiStorage* self,ImGuiID key);
    CIMGUI_API void ImGuiStorage_SetVoidPtr(ImGuiStorage* self,ImGuiID key,void* val);
    CIMGUI_API int* ImGuiStorage_GetIntRef(ImGuiStorage* self,ImGuiID key,int default_val);
    CIMGUI_API bool* ImGuiStorage_GetBoolRef(ImGuiStorage* self,ImGuiID key,bool default_val);
    CIMGUI_API float* ImGuiStorage_GetFloatRef(ImGuiStorage* self,ImGuiID key,float default_val);
    CIMGUI_API void** ImGuiStorage_GetVoidPtrRef(ImGuiStorage* self,ImGuiID key,void* default_val);
    CIMGUI_API void ImGuiStorage_SetAllInt(ImGuiStorage* self,int val);
    CIMGUI_API void ImGuiStorage_BuildSortByKey(ImGuiStorage* self);
    CIMGUI_API ImGuiListClipper* ImGuiListClipper_ImGuiListClipper(int items_count,float items_height);
    CIMGUI_API void ImGuiListClipper_destroy(ImGuiListClipper* self);
    CIMGUI_API bool ImGuiListClipper_Step(ImGuiListClipper* self);
    CIMGUI_API void ImGuiListClipper_Begin(ImGuiListClipper* self,int items_count,float items_height);
    CIMGUI_API void ImGuiListClipper_End(ImGuiListClipper* self);
    CIMGUI_API ImColor* ImColor_ImColorNil(void);
    CIMGUI_API void ImColor_destroy(ImColor* self);
    CIMGUI_API ImColor* ImColor_ImColorInt(int r,int g,int b,int a);
    CIMGUI_API ImColor* ImColor_ImColorU32(ImU32 rgba);
    CIMGUI_API ImColor* ImColor_ImColorFloat(float r,float g,float b,float a);
    CIMGUI_API ImColor* ImColor_ImColorVec4(const ImVec4 col);
    CIMGUI_API void ImColor_SetHSV(ImColor* self,float h,float s,float v,float a);
    CIMGUI_API void ImColor_HSV(ImColor *pOut,float h,float s,float v,float a);
    CIMGUI_API ImDrawCmd* ImDrawCmd_ImDrawCmd(void);
    CIMGUI_API void ImDrawCmd_destroy(ImDrawCmd* self);
    CIMGUI_API ImDrawListSplitter* ImDrawListSplitter_ImDrawListSplitter(void);
    CIMGUI_API void ImDrawListSplitter_destroy(ImDrawListSplitter* self);
    CIMGUI_API void ImDrawListSplitter_Clear(ImDrawListSplitter* self);
    CIMGUI_API void ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter* self);
    CIMGUI_API void ImDrawListSplitter_Split(ImDrawListSplitter* self,ImDrawList* draw_list,int count);
    CIMGUI_API void ImDrawListSplitter_Merge(ImDrawListSplitter* self,ImDrawList* draw_list);
    CIMGUI_API void ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter* self,ImDrawList* draw_list,int channel_idx);
    CIMGUI_API ImDrawList* ImDrawList_ImDrawList(const ImDrawListSharedData* shared_data);
    CIMGUI_API void ImDrawList_destroy(ImDrawList* self);
    CIMGUI_API void ImDrawList_PushClipRect(ImDrawList* self,ImVec2 clip_rect_min,ImVec2 clip_rect_max,bool intersect_with_current_clip_rect);
    CIMGUI_API void ImDrawList_PushClipRectFullScreen(ImDrawList* self);
    CIMGUI_API void ImDrawList_PopClipRect(ImDrawList* self);
    CIMGUI_API void ImDrawList_PushTextureID(ImDrawList* self,ImTextureID texture_id);
    CIMGUI_API void ImDrawList_PopTextureID(ImDrawList* self);
    CIMGUI_API void ImDrawList_GetClipRectMin(ImVec2 *pOut,ImDrawList* self);
    CIMGUI_API void ImDrawList_GetClipRectMax(ImVec2 *pOut,ImDrawList* self);
    CIMGUI_API void ImDrawList_AddLine(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,ImU32 col,float thickness);
    CIMGUI_API void ImDrawList_AddRect(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawCornerFlags rounding_corners,float thickness);
    CIMGUI_API void ImDrawList_AddRectFilled(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawCornerFlags rounding_corners);
    CIMGUI_API void ImDrawList_AddRectFilledMultiColor(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col_upr_left,ImU32 col_upr_right,ImU32 col_bot_right,ImU32 col_bot_left);
    CIMGUI_API void ImDrawList_AddQuad(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness);
    CIMGUI_API void ImDrawList_AddQuadFilled(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col);
    CIMGUI_API void ImDrawList_AddTriangle(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness);
    CIMGUI_API void ImDrawList_AddTriangleFilled(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col);
    CIMGUI_API void ImDrawList_AddCircle(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness);
    CIMGUI_API void ImDrawList_AddCircleFilled(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
    CIMGUI_API void ImDrawList_AddNgon(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness);
    CIMGUI_API void ImDrawList_AddNgonFilled(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
    CIMGUI_API void ImDrawList_AddTextVec2(ImDrawList* self,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end);
    CIMGUI_API void ImDrawList_AddTextFontPtr(ImDrawList* self,const ImFont* font,float font_size,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end,float wrap_width,const ImVec4* cpu_fine_clip_rect);
    CIMGUI_API void ImDrawList_AddPolyline(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col,bool closed,float thickness);
    CIMGUI_API void ImDrawList_AddConvexPolyFilled(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col);
    CIMGUI_API void ImDrawList_AddBezierCurve(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness,int num_segments);
    CIMGUI_API void ImDrawList_AddImage(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col);
    CIMGUI_API void ImDrawList_AddImageQuad(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 uv1,const ImVec2 uv2,const ImVec2 uv3,const ImVec2 uv4,ImU32 col);
    CIMGUI_API void ImDrawList_AddImageRounded(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col,float rounding,ImDrawCornerFlags rounding_corners);
    CIMGUI_API void ImDrawList_PathClear(ImDrawList* self);
    CIMGUI_API void ImDrawList_PathLineTo(ImDrawList* self,const ImVec2 pos);
    CIMGUI_API void ImDrawList_PathLineToMergeDuplicate(ImDrawList* self,const ImVec2 pos);
    CIMGUI_API void ImDrawList_PathFillConvex(ImDrawList* self,ImU32 col);
    CIMGUI_API void ImDrawList_PathStroke(ImDrawList* self,ImU32 col,bool closed,float thickness);
    CIMGUI_API void ImDrawList_PathArcTo(ImDrawList* self,const ImVec2 center,float radius,float a_min,float a_max,int num_segments);
    CIMGUI_API void ImDrawList_PathArcToFast(ImDrawList* self,const ImVec2 center,float radius,int a_min_of_12,int a_max_of_12);
    CIMGUI_API void ImDrawList_PathBezierCurveTo(ImDrawList* self,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,int num_segments);
    CIMGUI_API void ImDrawList_PathRect(ImDrawList* self,const ImVec2 rect_min,const ImVec2 rect_max,float rounding,ImDrawCornerFlags rounding_corners);
    CIMGUI_API void ImDrawList_AddCallback(ImDrawList* self,ImDrawCallback callback,void* callback_data);
    CIMGUI_API void ImDrawList_AddDrawCmd(ImDrawList* self);
    CIMGUI_API ImDrawList* ImDrawList_CloneOutput(ImDrawList* self);
    CIMGUI_API void ImDrawList_ChannelsSplit(ImDrawList* self,int count);
    CIMGUI_API void ImDrawList_ChannelsMerge(ImDrawList* self);
    CIMGUI_API void ImDrawList_ChannelsSetCurrent(ImDrawList* self,int n);
    CIMGUI_API void ImDrawList_PrimReserve(ImDrawList* self,int idx_count,int vtx_count);
    CIMGUI_API void ImDrawList_PrimUnreserve(ImDrawList* self,int idx_count,int vtx_count);
    CIMGUI_API void ImDrawList_PrimRect(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col);
    CIMGUI_API void ImDrawList_PrimRectUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col);
    CIMGUI_API void ImDrawList_PrimQuadUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col);
    CIMGUI_API void ImDrawList_PrimWriteVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
    CIMGUI_API void ImDrawList_PrimWriteIdx(ImDrawList* self,ImDrawIdx idx);
    CIMGUI_API void ImDrawList_PrimVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
    CIMGUI_API void ImDrawList__ResetForNewFrame(ImDrawList* self);
    CIMGUI_API void ImDrawList__ClearFreeMemory(ImDrawList* self);
    CIMGUI_API void ImDrawList__PopUnusedDrawCmd(ImDrawList* self);
    CIMGUI_API void ImDrawList__OnChangedClipRect(ImDrawList* self);
    CIMGUI_API void ImDrawList__OnChangedTextureID(ImDrawList* self);
    CIMGUI_API void ImDrawList__OnChangedVtxOffset(ImDrawList* self);
    CIMGUI_API ImDrawData* ImDrawData_ImDrawData(void);
    CIMGUI_API void ImDrawData_destroy(ImDrawData* self);
    CIMGUI_API void ImDrawData_Clear(ImDrawData* self);
    CIMGUI_API void ImDrawData_DeIndexAllBuffers(ImDrawData* self);
    CIMGUI_API void ImDrawData_ScaleClipRects(ImDrawData* self,const ImVec2 fb_scale);
    CIMGUI_API ImFontConfig* ImFontConfig_ImFontConfig(void);
    CIMGUI_API void ImFontConfig_destroy(ImFontConfig* self);
    CIMGUI_API ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder(void);
    CIMGUI_API void ImFontGlyphRangesBuilder_destroy(ImFontGlyphRangesBuilder* self);
    CIMGUI_API void ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder* self);
    CIMGUI_API bool ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder* self,size_t n);
    CIMGUI_API void ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder* self,size_t n);
    CIMGUI_API void ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder* self,ImWchar c);
    CIMGUI_API void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder* self,const char* text,const char* text_end);
    CIMGUI_API void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder* self,const ImWchar* ranges);
    CIMGUI_API void ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder* self,ImVector_ImWchar* out_ranges);
    CIMGUI_API ImFontAtlasCustomRect* ImFontAtlasCustomRect_ImFontAtlasCustomRect(void);
    CIMGUI_API void ImFontAtlasCustomRect_destroy(ImFontAtlasCustomRect* self);
    CIMGUI_API bool ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect* self);
    CIMGUI_API ImFontAtlas* ImFontAtlas_ImFontAtlas(void);
    CIMGUI_API void ImFontAtlas_destroy(ImFontAtlas* self);
    CIMGUI_API ImFont* ImFontAtlas_AddFont(ImFontAtlas* self,const ImFontConfig* font_cfg);
    CIMGUI_API ImFont* ImFontAtlas_AddFontDefault(ImFontAtlas* self,const ImFontConfig* font_cfg);
    CIMGUI_API ImFont* ImFontAtlas_AddFontFromFileTTF(ImFontAtlas* self,const char* filename,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
    CIMGUI_API ImFont* ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas* self,void* font_data,int font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
    CIMGUI_API ImFont* ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas* self,const void* compressed_font_data,int compressed_font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
    CIMGUI_API ImFont* ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas* self,const char* compressed_font_data_base85,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
    CIMGUI_API void ImFontAtlas_ClearInputData(ImFontAtlas* self);
    CIMGUI_API void ImFontAtlas_ClearTexData(ImFontAtlas* self);
    CIMGUI_API void ImFontAtlas_ClearFonts(ImFontAtlas* self);
    CIMGUI_API void ImFontAtlas_Clear(ImFontAtlas* self);
    CIMGUI_API bool ImFontAtlas_Build(ImFontAtlas* self);
    CIMGUI_API void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
    CIMGUI_API void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
    CIMGUI_API bool ImFontAtlas_IsBuilt(ImFontAtlas* self);
    CIMGUI_API void ImFontAtlas_SetTexID(ImFontAtlas* self,ImTextureID id);
    CIMGUI_API const ImWchar* ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas* self);
    CIMGUI_API const ImWchar* ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas* self);
    CIMGUI_API const ImWchar* ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas* self);
    CIMGUI_API const ImWchar* ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas* self);
    CIMGUI_API const ImWchar* ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas* self);
    CIMGUI_API const ImWchar* ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas* self);
    CIMGUI_API const ImWchar* ImFontAtlas_GetGlyphRangesThai(ImFontAtlas* self);
    CIMGUI_API const ImWchar* ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas* self);
    CIMGUI_API int ImFontAtlas_AddCustomRectRegular(ImFontAtlas* self,int width,int height);
    CIMGUI_API int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas* self,ImFont* font,ImWchar id,int width,int height,float advance_x,const ImVec2 offset);
    CIMGUI_API ImFontAtlasCustomRect* ImFontAtlas_GetCustomRectByIndex(ImFontAtlas* self,int index);
    CIMGUI_API void ImFontAtlas_CalcCustomRectUV(ImFontAtlas* self,const ImFontAtlasCustomRect* rect,ImVec2* out_uv_min,ImVec2* out_uv_max);
    CIMGUI_API bool ImFontAtlas_GetMouseCursorTexData(ImFontAtlas* self,ImGuiMouseCursor cursor,ImVec2* out_offset,ImVec2* out_size,ImVec2 out_uv_border[2],ImVec2 out_uv_fill[2]);
    CIMGUI_API ImFont* ImFont_ImFont(void);
    CIMGUI_API void ImFont_destroy(ImFont* self);
    CIMGUI_API const ImFontGlyph* ImFont_FindGlyph(ImFont* self,ImWchar c);
    CIMGUI_API const ImFontGlyph* ImFont_FindGlyphNoFallback(ImFont* self,ImWchar c);
    CIMGUI_API float ImFont_GetCharAdvance(ImFont* self,ImWchar c);
    CIMGUI_API bool ImFont_IsLoaded(ImFont* self);
    CIMGUI_API const char* ImFont_GetDebugName(ImFont* self);
    CIMGUI_API void ImFont_CalcTextSizeA(ImVec2 *pOut,ImFont* self,float size,float max_width,float wrap_width,const char* text_begin,const char* text_end,const char** remaining);
    CIMGUI_API const char* ImFont_CalcWordWrapPositionA(ImFont* self,float scale,const char* text,const char* text_end,float wrap_width);
    CIMGUI_API void ImFont_RenderChar(ImFont* self,ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,ImWchar c);
    CIMGUI_API void ImFont_RenderText(ImFont* self,ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,const ImVec4 clip_rect,const char* text_begin,const char* text_end,float wrap_width,bool cpu_fine_clip);
    CIMGUI_API void ImFont_BuildLookupTable(ImFont* self);
    CIMGUI_API void ImFont_ClearOutputData(ImFont* self);
    CIMGUI_API void ImFont_GrowIndex(ImFont* self,int new_size);
    CIMGUI_API void ImFont_AddGlyph(ImFont* self,ImFontConfig* src_cfg,ImWchar c,float x0,float y0,float x1,float y1,float u0,float v0,float u1,float v1,float advance_x);
    CIMGUI_API void ImFont_AddRemapChar(ImFont* self,ImWchar dst,ImWchar src,bool overwrite_dst);
    CIMGUI_API void ImFont_SetGlyphVisible(ImFont* self,ImWchar c,bool visible);
    CIMGUI_API void ImFont_SetFallbackChar(ImFont* self,ImWchar c);
    CIMGUI_API bool ImFont_IsGlyphRangeUnused(ImFont* self,unsigned int c_begin,unsigned int c_last);
    CIMGUI_API ImU32 igImHashData(const void* data,size_t data_size,ImU32 seed);
    CIMGUI_API ImU32 igImHashStr(const char* data,size_t data_size,ImU32 seed);
    CIMGUI_API ImU32 igImAlphaBlendColors(ImU32 col_a,ImU32 col_b);
    CIMGUI_API bool igImIsPowerOfTwo(int v);
    CIMGUI_API int igImUpperPowerOfTwo(int v);
    CIMGUI_API int igImStricmp(const char* str1,const char* str2);
    CIMGUI_API int igImStrnicmp(const char* str1,const char* str2,size_t count);
    CIMGUI_API void igImStrncpy(char* dst,const char* src,size_t count);
    CIMGUI_API char* igImStrdup(const char* str);
    CIMGUI_API char* igImStrdupcpy(char* dst,size_t* p_dst_size,const char* str);
    CIMGUI_API const char* igImStrchrRange(const char* str_begin,const char* str_end,char c);
    CIMGUI_API int igImStrlenW(const ImWchar* str);
    CIMGUI_API const char* igImStreolRange(const char* str,const char* str_end);
    CIMGUI_API const ImWchar* igImStrbolW(const ImWchar* buf_mid_line,const ImWchar* buf_begin);
    CIMGUI_API const char* igImStristr(const char* haystack,const char* haystack_end,const char* needle,const char* needle_end);
    CIMGUI_API void igImStrTrimBlanks(char* str);
    CIMGUI_API const char* igImStrSkipBlank(const char* str);
    CIMGUI_API int igImFormatString(char* buf,size_t buf_size,const char* fmt,...);
    CIMGUI_API int igImFormatStringV(char* buf,size_t buf_size,const char* fmt,va_list args);
    CIMGUI_API const char* igImParseFormatFindStart(const char* format);
    CIMGUI_API const char* igImParseFormatFindEnd(const char* format);
    CIMGUI_API const char* igImParseFormatTrimDecorations(const char* format,char* buf,size_t buf_size);
    CIMGUI_API int igImParseFormatPrecision(const char* format,int default_value);
    CIMGUI_API bool igImCharIsBlankA(char c);
    CIMGUI_API bool igImCharIsBlankW(unsigned int c);
    CIMGUI_API int igImTextStrToUtf8(char* buf,int buf_size,const ImWchar* in_text,const ImWchar* in_text_end);
    CIMGUI_API int igImTextCharFromUtf8(unsigned int* out_char,const char* in_text,const char* in_text_end);
    CIMGUI_API int igImTextStrFromUtf8(ImWchar* buf,int buf_size,const char* in_text,const char* in_text_end,const char** in_remaining);
    CIMGUI_API int igImTextCountCharsFromUtf8(const char* in_text,const char* in_text_end);
    CIMGUI_API int igImTextCountUtf8BytesFromChar(const char* in_text,const char* in_text_end);
    CIMGUI_API int igImTextCountUtf8BytesFromStr(const ImWchar* in_text,const ImWchar* in_text_end);
    CIMGUI_API ImFileHandle igImFileOpen(const char* filename,const char* mode);
    CIMGUI_API bool igImFileClose(ImFileHandle file);
    CIMGUI_API ImU64 igImFileGetSize(ImFileHandle file);
    CIMGUI_API ImU64 igImFileRead(void* data,ImU64 size,ImU64 count,ImFileHandle file);
    CIMGUI_API ImU64 igImFileWrite(const void* data,ImU64 size,ImU64 count,ImFileHandle file);
    CIMGUI_API void* igImFileLoadToMemory(const char* filename,const char* mode,size_t* out_file_size,int padding_bytes);
    CIMGUI_API float igImPowFloat(float x,float y);
    CIMGUI_API double igImPowdouble(double x,double y);
    CIMGUI_API float igImLogFloat(float x);
    CIMGUI_API double igImLogdouble(double x);
    CIMGUI_API float igImAbsFloat(float x);
    CIMGUI_API double igImAbsdouble(double x);
    CIMGUI_API float igImSignFloat(float x);
    CIMGUI_API double igImSigndouble(double x);
    CIMGUI_API void igImMin(ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs);
    CIMGUI_API void igImMax(ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs);
    CIMGUI_API void igImClamp(ImVec2 *pOut,const ImVec2 v,const ImVec2 mn,ImVec2 mx);
    CIMGUI_API void igImLerpVec2Float(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,float t);
    CIMGUI_API void igImLerpVec2Vec2(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 t);
    CIMGUI_API void igImLerpVec4(ImVec4 *pOut,const ImVec4 a,const ImVec4 b,float t);
    CIMGUI_API float igImSaturate(float f);
    CIMGUI_API float igImLengthSqrVec2(const ImVec2 lhs);
    CIMGUI_API float igImLengthSqrVec4(const ImVec4 lhs);
    CIMGUI_API float igImInvLength(const ImVec2 lhs,float fail_value);
    CIMGUI_API float igImFloorFloat(float f);
    CIMGUI_API void igImFloorVec2(ImVec2 *pOut,const ImVec2 v);
    CIMGUI_API int igImModPositive(int a,int b);
    CIMGUI_API float igImDot(const ImVec2 a,const ImVec2 b);
    CIMGUI_API void igImRotate(ImVec2 *pOut,const ImVec2 v,float cos_a,float sin_a);
    CIMGUI_API float igImLinearSweep(float current,float target,float speed);
    CIMGUI_API void igImMul(ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs);
    CIMGUI_API void igImBezierCalc(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,float t);
    CIMGUI_API void igImBezierClosestPoint(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 p,int num_segments);
    CIMGUI_API void igImBezierClosestPointCasteljau(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 p,float tess_tol);
    CIMGUI_API void igImLineClosestPoint(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 p);
    CIMGUI_API bool igImTriangleContainsPoint(const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p);
    CIMGUI_API void igImTriangleClosestPoint(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p);
    CIMGUI_API void igImTriangleBarycentricCoords(const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p,float* out_u,float* out_v,float* out_w);
    CIMGUI_API float igImTriangleArea(const ImVec2 a,const ImVec2 b,const ImVec2 c);
    CIMGUI_API ImGuiDir igImGetDirQuadrantFromDelta(float dx,float dy);
    CIMGUI_API ImVec1* ImVec1_ImVec1Nil(void);
    CIMGUI_API void ImVec1_destroy(ImVec1* self);
    CIMGUI_API ImVec1* ImVec1_ImVec1Float(float _x);
    CIMGUI_API ImVec2ih* ImVec2ih_ImVec2ihNil(void);
    CIMGUI_API void ImVec2ih_destroy(ImVec2ih* self);
    CIMGUI_API ImVec2ih* ImVec2ih_ImVec2ihshort(short _x,short _y);
    CIMGUI_API ImVec2ih* ImVec2ih_ImVec2ihVec2(const ImVec2 rhs);
    CIMGUI_API ImRect* ImRect_ImRectNil(void);
    CIMGUI_API void ImRect_destroy(ImRect* self);
    CIMGUI_API ImRect* ImRect_ImRectVec2(const ImVec2 min,const ImVec2 max);
    CIMGUI_API ImRect* ImRect_ImRectVec4(const ImVec4 v);
    CIMGUI_API ImRect* ImRect_ImRectFloat(float x1,float y1,float x2,float y2);
    CIMGUI_API void ImRect_GetCenter(ImVec2 *pOut,ImRect* self);
    CIMGUI_API void ImRect_GetSize(ImVec2 *pOut,ImRect* self);
    CIMGUI_API float ImRect_GetWidth(ImRect* self);
    CIMGUI_API float ImRect_GetHeight(ImRect* self);
    CIMGUI_API void ImRect_GetTL(ImVec2 *pOut,ImRect* self);
    CIMGUI_API void ImRect_GetTR(ImVec2 *pOut,ImRect* self);
    CIMGUI_API void ImRect_GetBL(ImVec2 *pOut,ImRect* self);
    CIMGUI_API void ImRect_GetBR(ImVec2 *pOut,ImRect* self);
    CIMGUI_API bool ImRect_ContainsVec2(ImRect* self,const ImVec2 p);
    CIMGUI_API bool ImRect_ContainsRect(ImRect* self,const ImRect r);
    CIMGUI_API bool ImRect_Overlaps(ImRect* self,const ImRect r);
    CIMGUI_API void ImRect_AddVec2(ImRect* self,const ImVec2 p);
    CIMGUI_API void ImRect_AddRect(ImRect* self,const ImRect r);
    CIMGUI_API void ImRect_ExpandFloat(ImRect* self,const float amount);
    CIMGUI_API void ImRect_ExpandVec2(ImRect* self,const ImVec2 amount);
    CIMGUI_API void ImRect_Translate(ImRect* self,const ImVec2 d);
    CIMGUI_API void ImRect_TranslateX(ImRect* self,float dx);
    CIMGUI_API void ImRect_TranslateY(ImRect* self,float dy);
    CIMGUI_API void ImRect_ClipWith(ImRect* self,const ImRect r);
    CIMGUI_API void ImRect_ClipWithFull(ImRect* self,const ImRect r);
    CIMGUI_API void ImRect_Floor(ImRect* self);
    CIMGUI_API bool ImRect_IsInverted(ImRect* self);
    CIMGUI_API void ImRect_ToVec4(ImVec4 *pOut,ImRect* self);
    CIMGUI_API bool igImBitArrayTestBit(const ImU32* arr,int n);
    CIMGUI_API void igImBitArrayClearBit(ImU32* arr,int n);
    CIMGUI_API void igImBitArraySetBit(ImU32* arr,int n);
    CIMGUI_API void igImBitArraySetBitRange(ImU32* arr,int n,int n2);
    CIMGUI_API void ImBitVector_Create(ImBitVector* self,int sz);
    CIMGUI_API void ImBitVector_Clear(ImBitVector* self);
    CIMGUI_API bool ImBitVector_TestBit(ImBitVector* self,int n);
    CIMGUI_API void ImBitVector_SetBit(ImBitVector* self,int n);
    CIMGUI_API void ImBitVector_ClearBit(ImBitVector* self,int n);
    CIMGUI_API ImDrawListSharedData* ImDrawListSharedData_ImDrawListSharedData(void);
    CIMGUI_API void ImDrawListSharedData_destroy(ImDrawListSharedData* self);
    CIMGUI_API void ImDrawListSharedData_SetCircleSegmentMaxError(ImDrawListSharedData* self,float max_error);
    CIMGUI_API void ImDrawDataBuilder_Clear(ImDrawDataBuilder* self);
    CIMGUI_API void ImDrawDataBuilder_ClearFreeMemory(ImDrawDataBuilder* self);
    CIMGUI_API void ImDrawDataBuilder_FlattenIntoSingleLayer(ImDrawDataBuilder* self);
    CIMGUI_API ImGuiStyleMod* ImGuiStyleMod_ImGuiStyleModInt(ImGuiStyleVar idx,int v);
    CIMGUI_API void ImGuiStyleMod_destroy(ImGuiStyleMod* self);
    CIMGUI_API ImGuiStyleMod* ImGuiStyleMod_ImGuiStyleModFloat(ImGuiStyleVar idx,float v);
    CIMGUI_API ImGuiStyleMod* ImGuiStyleMod_ImGuiStyleModVec2(ImGuiStyleVar idx,ImVec2 v);
    CIMGUI_API ImGuiMenuColumns* ImGuiMenuColumns_ImGuiMenuColumns(void);
    CIMGUI_API void ImGuiMenuColumns_destroy(ImGuiMenuColumns* self);
    CIMGUI_API void ImGuiMenuColumns_Update(ImGuiMenuColumns* self,int count,float spacing,bool clear);
    CIMGUI_API float ImGuiMenuColumns_DeclColumns(ImGuiMenuColumns* self,float w0,float w1,float w2);
    CIMGUI_API float ImGuiMenuColumns_CalcExtraSpace(ImGuiMenuColumns* self,float avail_w);
    CIMGUI_API ImGuiInputTextState* ImGuiInputTextState_ImGuiInputTextState(void);
    CIMGUI_API void ImGuiInputTextState_destroy(ImGuiInputTextState* self);
    CIMGUI_API void ImGuiInputTextState_ClearText(ImGuiInputTextState* self);
    CIMGUI_API void ImGuiInputTextState_ClearFreeMemory(ImGuiInputTextState* self);
    CIMGUI_API int ImGuiInputTextState_GetUndoAvailCount(ImGuiInputTextState* self);
    CIMGUI_API int ImGuiInputTextState_GetRedoAvailCount(ImGuiInputTextState* self);
    CIMGUI_API void ImGuiInputTextState_OnKeyPressed(ImGuiInputTextState* self,int key);
    CIMGUI_API void ImGuiInputTextState_CursorAnimReset(ImGuiInputTextState* self);
    CIMGUI_API void ImGuiInputTextState_CursorClamp(ImGuiInputTextState* self);
    CIMGUI_API bool ImGuiInputTextState_HasSelection(ImGuiInputTextState* self);
    CIMGUI_API void ImGuiInputTextState_ClearSelection(ImGuiInputTextState* self);
    CIMGUI_API void ImGuiInputTextState_SelectAll(ImGuiInputTextState* self);
    CIMGUI_API ImGuiPopupData* ImGuiPopupData_ImGuiPopupData(void);
    CIMGUI_API void ImGuiPopupData_destroy(ImGuiPopupData* self);
    CIMGUI_API ImGuiNavMoveResult* ImGuiNavMoveResult_ImGuiNavMoveResult(void);
    CIMGUI_API void ImGuiNavMoveResult_destroy(ImGuiNavMoveResult* self);
    CIMGUI_API void ImGuiNavMoveResult_Clear(ImGuiNavMoveResult* self);
    CIMGUI_API ImGuiNextWindowData* ImGuiNextWindowData_ImGuiNextWindowData(void);
    CIMGUI_API void ImGuiNextWindowData_destroy(ImGuiNextWindowData* self);
    CIMGUI_API void ImGuiNextWindowData_ClearFlags(ImGuiNextWindowData* self);
    CIMGUI_API ImGuiNextItemData* ImGuiNextItemData_ImGuiNextItemData(void);
    CIMGUI_API void ImGuiNextItemData_destroy(ImGuiNextItemData* self);
    CIMGUI_API void ImGuiNextItemData_ClearFlags(ImGuiNextItemData* self);
    CIMGUI_API ImGuiPtrOrIndex* ImGuiPtrOrIndex_ImGuiPtrOrIndexPtr(void* ptr);
    CIMGUI_API void ImGuiPtrOrIndex_destroy(ImGuiPtrOrIndex* self);
    CIMGUI_API ImGuiPtrOrIndex* ImGuiPtrOrIndex_ImGuiPtrOrIndexInt(int index);
    CIMGUI_API ImGuiColumnData* ImGuiColumnData_ImGuiColumnData(void);
    CIMGUI_API void ImGuiColumnData_destroy(ImGuiColumnData* self);
    CIMGUI_API ImGuiColumns* ImGuiColumns_ImGuiColumns(void);
    CIMGUI_API void ImGuiColumns_destroy(ImGuiColumns* self);
    CIMGUI_API void ImGuiColumns_Clear(ImGuiColumns* self);
    CIMGUI_API ImGuiWindowSettings* ImGuiWindowSettings_ImGuiWindowSettings(void);
    CIMGUI_API void ImGuiWindowSettings_destroy(ImGuiWindowSettings* self);
    CIMGUI_API char* ImGuiWindowSettings_GetName(ImGuiWindowSettings* self);
    CIMGUI_API ImGuiSettingsHandler* ImGuiSettingsHandler_ImGuiSettingsHandler(void);
    CIMGUI_API void ImGuiSettingsHandler_destroy(ImGuiSettingsHandler* self);
    CIMGUI_API ImGuiContext* ImGuiContext_ImGuiContext(ImFontAtlas* shared_font_atlas);
    CIMGUI_API void ImGuiContext_destroy(ImGuiContext* self);
    CIMGUI_API ImGuiWindowTempData* ImGuiWindowTempData_ImGuiWindowTempData(void);
    CIMGUI_API void ImGuiWindowTempData_destroy(ImGuiWindowTempData* self);
    CIMGUI_API ImGuiWindow* ImGuiWindow_ImGuiWindow(ImGuiContext* context,const char* name);
    CIMGUI_API void ImGuiWindow_destroy(ImGuiWindow* self);
    CIMGUI_API ImGuiID ImGuiWindow_GetIDStr(ImGuiWindow* self,const char* str,const char* str_end);
    CIMGUI_API ImGuiID ImGuiWindow_GetIDPtr(ImGuiWindow* self,const void* ptr);
    CIMGUI_API ImGuiID ImGuiWindow_GetIDInt(ImGuiWindow* self,int n);
    CIMGUI_API ImGuiID ImGuiWindow_GetIDNoKeepAliveStr(ImGuiWindow* self,const char* str,const char* str_end);
    CIMGUI_API ImGuiID ImGuiWindow_GetIDNoKeepAlivePtr(ImGuiWindow* self,const void* ptr);
    CIMGUI_API ImGuiID ImGuiWindow_GetIDNoKeepAliveInt(ImGuiWindow* self,int n);
    CIMGUI_API ImGuiID ImGuiWindow_GetIDFromRectangle(ImGuiWindow* self,const ImRect r_abs);
    CIMGUI_API void ImGuiWindow_Rect(ImRect *pOut,ImGuiWindow* self);
    CIMGUI_API float ImGuiWindow_CalcFontSize(ImGuiWindow* self);
    CIMGUI_API float ImGuiWindow_TitleBarHeight(ImGuiWindow* self);
    CIMGUI_API void ImGuiWindow_TitleBarRect(ImRect *pOut,ImGuiWindow* self);
    CIMGUI_API float ImGuiWindow_MenuBarHeight(ImGuiWindow* self);
    CIMGUI_API void ImGuiWindow_MenuBarRect(ImRect *pOut,ImGuiWindow* self);
    CIMGUI_API ImGuiLastItemDataBackup* ImGuiLastItemDataBackup_ImGuiLastItemDataBackup(void);
    CIMGUI_API void ImGuiLastItemDataBackup_destroy(ImGuiLastItemDataBackup* self);
    CIMGUI_API void ImGuiLastItemDataBackup_Backup(ImGuiLastItemDataBackup* self);
    CIMGUI_API void ImGuiLastItemDataBackup_Restore(ImGuiLastItemDataBackup* self);
    CIMGUI_API ImGuiTabItem* ImGuiTabItem_ImGuiTabItem(void);
    CIMGUI_API void ImGuiTabItem_destroy(ImGuiTabItem* self);
    CIMGUI_API ImGuiTabBar* ImGuiTabBar_ImGuiTabBar(void);
    CIMGUI_API void ImGuiTabBar_destroy(ImGuiTabBar* self);
    CIMGUI_API int ImGuiTabBar_GetTabOrder(ImGuiTabBar* self,const ImGuiTabItem* tab);
    CIMGUI_API const char* ImGuiTabBar_GetTabName(ImGuiTabBar* self,const ImGuiTabItem* tab);
    CIMGUI_API ImGuiWindow* igGetCurrentWindowRead(void);
    CIMGUI_API ImGuiWindow* igGetCurrentWindow(void);
    CIMGUI_API ImGuiWindow* igFindWindowByID(ImGuiID id);
    CIMGUI_API ImGuiWindow* igFindWindowByName(const char* name);
    CIMGUI_API void igUpdateWindowParentAndRootLinks(ImGuiWindow* window,ImGuiWindowFlags flags,ImGuiWindow* parent_window);
    CIMGUI_API void igCalcWindowExpectedSize(ImVec2 *pOut,ImGuiWindow* window);
    CIMGUI_API bool igIsWindowChildOf(ImGuiWindow* window,ImGuiWindow* potential_parent);
    CIMGUI_API bool igIsWindowNavFocusable(ImGuiWindow* window);
    CIMGUI_API void igGetWindowAllowedExtentRect(ImRect *pOut,ImGuiWindow* window);
    CIMGUI_API void igSetWindowPosWindowPtr(ImGuiWindow* window,const ImVec2 pos,ImGuiCond cond);
    CIMGUI_API void igSetWindowSizeWindowPtr(ImGuiWindow* window,const ImVec2 size,ImGuiCond cond);
    CIMGUI_API void igSetWindowCollapsedWindowPtr(ImGuiWindow* window,bool collapsed,ImGuiCond cond);
    CIMGUI_API void igSetWindowHitTestHole(ImGuiWindow* window,const ImVec2 pos,const ImVec2 size);
    CIMGUI_API void igFocusWindow(ImGuiWindow* window);
    CIMGUI_API void igFocusTopMostWindowUnderOne(ImGuiWindow* under_this_window,ImGuiWindow* ignore_window);
    CIMGUI_API void igBringWindowToFocusFront(ImGuiWindow* window);
    CIMGUI_API void igBringWindowToDisplayFront(ImGuiWindow* window);
    CIMGUI_API void igBringWindowToDisplayBack(ImGuiWindow* window);
    CIMGUI_API void igSetCurrentFont(ImFont* font);
    CIMGUI_API ImFont* igGetDefaultFont(void);
    CIMGUI_API ImDrawList* igGetForegroundDrawListWindowPtr(ImGuiWindow* window);
    CIMGUI_API void igInitialize(ImGuiContext* context);
    CIMGUI_API void igShutdown(ImGuiContext* context);
    CIMGUI_API void igUpdateHoveredWindowAndCaptureFlags(void);
    CIMGUI_API void igStartMouseMovingWindow(ImGuiWindow* window);
    CIMGUI_API void igUpdateMouseMovingWindowNewFrame(void);
    CIMGUI_API void igUpdateMouseMovingWindowEndFrame(void);
    CIMGUI_API void igMarkIniSettingsDirtyNil(void);
    CIMGUI_API void igMarkIniSettingsDirtyWindowPtr(ImGuiWindow* window);
    CIMGUI_API void igClearIniSettings(void);
    CIMGUI_API ImGuiWindowSettings* igCreateNewWindowSettings(const char* name);
    CIMGUI_API ImGuiWindowSettings* igFindWindowSettings(ImGuiID id);
    CIMGUI_API ImGuiWindowSettings* igFindOrCreateWindowSettings(const char* name);
    CIMGUI_API ImGuiSettingsHandler* igFindSettingsHandler(const char* type_name);
    CIMGUI_API void igSetNextWindowScroll(const ImVec2 scroll);
    CIMGUI_API void igSetScrollXWindowPtr(ImGuiWindow* window,float new_scroll_x);
    CIMGUI_API void igSetScrollYWindowPtr(ImGuiWindow* window,float new_scroll_y);
    CIMGUI_API void igSetScrollFromPosXWindowPtr(ImGuiWindow* window,float local_x,float center_x_ratio);
    CIMGUI_API void igSetScrollFromPosYWindowPtr(ImGuiWindow* window,float local_y,float center_y_ratio);
    CIMGUI_API void igScrollToBringRectIntoView(ImVec2 *pOut,ImGuiWindow* window,const ImRect item_rect);
    CIMGUI_API ImGuiID igGetItemID(void);
    CIMGUI_API ImGuiItemStatusFlags igGetItemStatusFlags(void);
    CIMGUI_API ImGuiID igGetActiveID(void);
    CIMGUI_API ImGuiID igGetFocusID(void);
    CIMGUI_API void igSetActiveID(ImGuiID id,ImGuiWindow* window);
    CIMGUI_API void igSetFocusID(ImGuiID id,ImGuiWindow* window);
    CIMGUI_API void igClearActiveID(void);
    CIMGUI_API ImGuiID igGetHoveredID(void);
    CIMGUI_API void igSetHoveredID(ImGuiID id);
    CIMGUI_API void igKeepAliveID(ImGuiID id);
    CIMGUI_API void igMarkItemEdited(ImGuiID id);
    CIMGUI_API void igPushOverrideID(ImGuiID id);
    CIMGUI_API void igItemSizeVec2(const ImVec2 size,float text_baseline_y);
    CIMGUI_API void igItemSizeRect(const ImRect bb,float text_baseline_y);
    CIMGUI_API bool igItemAdd(const ImRect bb,ImGuiID id,const ImRect* nav_bb);
    CIMGUI_API bool igItemHoverable(const ImRect bb,ImGuiID id);
    CIMGUI_API bool igIsClippedEx(const ImRect bb,ImGuiID id,bool clip_even_when_logged);
    CIMGUI_API void igSetLastItemData(ImGuiWindow* window,ImGuiID item_id,ImGuiItemStatusFlags status_flags,const ImRect item_rect);
    CIMGUI_API bool igFocusableItemRegister(ImGuiWindow* window,ImGuiID id);
    CIMGUI_API void igFocusableItemUnregister(ImGuiWindow* window);
    CIMGUI_API void igCalcItemSize(ImVec2 *pOut,ImVec2 size,float default_w,float default_h);
    CIMGUI_API float igCalcWrapWidthForPos(const ImVec2 pos,float wrap_pos_x);
    CIMGUI_API void igPushMultiItemsWidths(int components,float width_full);
    CIMGUI_API void igPushItemFlag(ImGuiItemFlags option,bool enabled);
    CIMGUI_API void igPopItemFlag(void);
    CIMGUI_API bool igIsItemToggledSelection(void);
    CIMGUI_API void igGetContentRegionMaxAbs(ImVec2 *pOut);
    CIMGUI_API void igShrinkWidths(ImGuiShrinkWidthItem* items,int count,float width_excess);
    CIMGUI_API void igLogBegin(ImGuiLogType type,int auto_open_depth);
    CIMGUI_API void igLogToBuffer(int auto_open_depth);
    CIMGUI_API bool igBeginChildEx(const char* name,ImGuiID id,const ImVec2 size_arg,bool border,ImGuiWindowFlags flags);
    CIMGUI_API void igOpenPopupEx(ImGuiID id,ImGuiPopupFlags popup_flags);
    CIMGUI_API void igClosePopupToLevel(int remaining,bool restore_focus_to_window_under_popup);
    CIMGUI_API void igClosePopupsOverWindow(ImGuiWindow* ref_window,bool restore_focus_to_window_under_popup);
    CIMGUI_API bool igIsPopupOpenID(ImGuiID id,ImGuiPopupFlags popup_flags);
    CIMGUI_API bool igBeginPopupEx(ImGuiID id,ImGuiWindowFlags extra_flags);
    CIMGUI_API void igBeginTooltipEx(ImGuiWindowFlags extra_flags,ImGuiTooltipFlags tooltip_flags);
    CIMGUI_API ImGuiWindow* igGetTopMostPopupModal(void);
    CIMGUI_API void igFindBestWindowPosForPopup(ImVec2 *pOut,ImGuiWindow* window);
    CIMGUI_API void igFindBestWindowPosForPopupEx(ImVec2 *pOut,const ImVec2 ref_pos,const ImVec2 size,ImGuiDir* last_dir,const ImRect r_outer,const ImRect r_avoid,ImGuiPopupPositionPolicy policy);
    CIMGUI_API void igNavInitWindow(ImGuiWindow* window,bool force_reinit);
    CIMGUI_API bool igNavMoveRequestButNoResultYet(void);
    CIMGUI_API void igNavMoveRequestCancel(void);
    CIMGUI_API void igNavMoveRequestForward(ImGuiDir move_dir,ImGuiDir clip_dir,const ImRect bb_rel,ImGuiNavMoveFlags move_flags);
    CIMGUI_API void igNavMoveRequestTryWrapping(ImGuiWindow* window,ImGuiNavMoveFlags move_flags);
    CIMGUI_API float igGetNavInputAmount(ImGuiNavInput n,ImGuiInputReadMode mode);
    CIMGUI_API void igGetNavInputAmount2d(ImVec2 *pOut,ImGuiNavDirSourceFlags dir_sources,ImGuiInputReadMode mode,float slow_factor,float fast_factor);
    CIMGUI_API int igCalcTypematicRepeatAmount(float t0,float t1,float repeat_delay,float repeat_rate);
    CIMGUI_API void igActivateItem(ImGuiID id);
    CIMGUI_API void igSetNavID(ImGuiID id,int nav_layer,ImGuiID focus_scope_id);
    CIMGUI_API void igSetNavIDWithRectRel(ImGuiID id,int nav_layer,ImGuiID focus_scope_id,const ImRect rect_rel);
    CIMGUI_API void igPushFocusScope(ImGuiID id);
    CIMGUI_API void igPopFocusScope(void);
    CIMGUI_API ImGuiID igGetFocusScopeID(void);
    CIMGUI_API bool igIsActiveIdUsingNavDir(ImGuiDir dir);
    CIMGUI_API bool igIsActiveIdUsingNavInput(ImGuiNavInput input);
    CIMGUI_API bool igIsActiveIdUsingKey(ImGuiKey key);
    CIMGUI_API bool igIsMouseDragPastThreshold(ImGuiMouseButton button,float lock_threshold);
    CIMGUI_API bool igIsKeyPressedMap(ImGuiKey key,bool repeat);
    CIMGUI_API bool igIsNavInputDown(ImGuiNavInput n);
    CIMGUI_API bool igIsNavInputTest(ImGuiNavInput n,ImGuiInputReadMode rm);
    CIMGUI_API ImGuiKeyModFlags igGetMergedKeyModFlags(void);
    CIMGUI_API bool igBeginDragDropTargetCustom(const ImRect bb,ImGuiID id);
    CIMGUI_API void igClearDragDrop(void);
    CIMGUI_API bool igIsDragDropPayloadBeingAccepted(void);
    CIMGUI_API void igSetWindowClipRectBeforeSetChannel(ImGuiWindow* window,const ImRect clip_rect);
    CIMGUI_API void igBeginColumns(const char* str_id,int count,ImGuiColumnsFlags flags);
    CIMGUI_API void igEndColumns(void);
    CIMGUI_API void igPushColumnClipRect(int column_index);
    CIMGUI_API void igPushColumnsBackground(void);
    CIMGUI_API void igPopColumnsBackground(void);
    CIMGUI_API ImGuiID igGetColumnsID(const char* str_id,int count);
    CIMGUI_API ImGuiColumns* igFindOrCreateColumns(ImGuiWindow* window,ImGuiID id);
    CIMGUI_API float igGetColumnOffsetFromNorm(const ImGuiColumns* columns,float offset_norm);
    CIMGUI_API float igGetColumnNormFromOffset(const ImGuiColumns* columns,float offset);
    CIMGUI_API bool igBeginTabBarEx(ImGuiTabBar* tab_bar,const ImRect bb,ImGuiTabBarFlags flags);
    CIMGUI_API ImGuiTabItem* igTabBarFindTabByID(ImGuiTabBar* tab_bar,ImGuiID tab_id);
    CIMGUI_API void igTabBarRemoveTab(ImGuiTabBar* tab_bar,ImGuiID tab_id);
    CIMGUI_API void igTabBarCloseTab(ImGuiTabBar* tab_bar,ImGuiTabItem* tab);
    CIMGUI_API void igTabBarQueueChangeTabOrder(ImGuiTabBar* tab_bar,const ImGuiTabItem* tab,int dir);
    CIMGUI_API bool igTabItemEx(ImGuiTabBar* tab_bar,const char* label,bool* p_open,ImGuiTabItemFlags flags);
    CIMGUI_API void igTabItemCalcSize(ImVec2 *pOut,const char* label,bool has_close_button);
    CIMGUI_API void igTabItemBackground(ImDrawList* draw_list,const ImRect bb,ImGuiTabItemFlags flags,ImU32 col);
    CIMGUI_API bool igTabItemLabelAndCloseButton(ImDrawList* draw_list,const ImRect bb,ImGuiTabItemFlags flags,ImVec2 frame_padding,const char* label,ImGuiID tab_id,ImGuiID close_button_id,bool is_contents_visible);
    CIMGUI_API void igRenderText(ImVec2 pos,const char* text,const char* text_end,bool hide_text_after_hash);
    CIMGUI_API void igRenderTextWrapped(ImVec2 pos,const char* text,const char* text_end,float wrap_width);
    CIMGUI_API void igRenderTextClipped(const ImVec2 pos_min,const ImVec2 pos_max,const char* text,const char* text_end,const ImVec2* text_size_if_known,const ImVec2 align,const ImRect* clip_rect);
    CIMGUI_API void igRenderTextClippedEx(ImDrawList* draw_list,const ImVec2 pos_min,const ImVec2 pos_max,const char* text,const char* text_end,const ImVec2* text_size_if_known,const ImVec2 align,const ImRect* clip_rect);
    CIMGUI_API void igRenderTextEllipsis(ImDrawList* draw_list,const ImVec2 pos_min,const ImVec2 pos_max,float clip_max_x,float ellipsis_max_x,const char* text,const char* text_end,const ImVec2* text_size_if_known);
    CIMGUI_API void igRenderFrame(ImVec2 p_min,ImVec2 p_max,ImU32 fill_col,bool border,float rounding);
    CIMGUI_API void igRenderFrameBorder(ImVec2 p_min,ImVec2 p_max,float rounding);
    CIMGUI_API void igRenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list,ImVec2 p_min,ImVec2 p_max,ImU32 fill_col,float grid_step,ImVec2 grid_off,float rounding,int rounding_corners_flags);
    CIMGUI_API void igRenderNavHighlight(const ImRect bb,ImGuiID id,ImGuiNavHighlightFlags flags);
    CIMGUI_API const char* igFindRenderedTextEnd(const char* text,const char* text_end);
    CIMGUI_API void igLogRenderedText(const ImVec2* ref_pos,const char* text,const char* text_end);
    CIMGUI_API void igRenderArrow(ImDrawList* draw_list,ImVec2 pos,ImU32 col,ImGuiDir dir,float scale);
    CIMGUI_API void igRenderBullet(ImDrawList* draw_list,ImVec2 pos,ImU32 col);
    CIMGUI_API void igRenderCheckMark(ImDrawList* draw_list,ImVec2 pos,ImU32 col,float sz);
    CIMGUI_API void igRenderMouseCursor(ImDrawList* draw_list,ImVec2 pos,float scale,ImGuiMouseCursor mouse_cursor,ImU32 col_fill,ImU32 col_border,ImU32 col_shadow);
    CIMGUI_API void igRenderArrowPointingAt(ImDrawList* draw_list,ImVec2 pos,ImVec2 half_sz,ImGuiDir direction,ImU32 col);
    CIMGUI_API void igRenderRectFilledRangeH(ImDrawList* draw_list,const ImRect rect,ImU32 col,float x_start_norm,float x_end_norm,float rounding);
    CIMGUI_API void igRenderRectFilledWithHole(ImDrawList* draw_list,ImRect outer,ImRect inner,ImU32 col,float rounding);
    CIMGUI_API void igTextEx(const char* text,const char* text_end,ImGuiTextFlags flags);
    CIMGUI_API bool igButtonEx(const char* label,const ImVec2 size_arg,ImGuiButtonFlags flags);
    CIMGUI_API bool igCloseButton(ImGuiID id,const ImVec2 pos);
    CIMGUI_API bool igCollapseButton(ImGuiID id,const ImVec2 pos);
    CIMGUI_API bool igArrowButtonEx(const char* str_id,ImGuiDir dir,ImVec2 size_arg,ImGuiButtonFlags flags);
    CIMGUI_API void igScrollbar(ImGuiAxis axis);
    CIMGUI_API bool igScrollbarEx(const ImRect bb,ImGuiID id,ImGuiAxis axis,float* p_scroll_v,float avail_v,float contents_v,ImDrawCornerFlags rounding_corners);
    CIMGUI_API bool igImageButtonEx(ImGuiID id,ImTextureID texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec2 padding,const ImVec4 bg_col,const ImVec4 tint_col);
    CIMGUI_API void igGetWindowScrollbarRect(ImRect *pOut,ImGuiWindow* window,ImGuiAxis axis);
    CIMGUI_API ImGuiID igGetWindowScrollbarID(ImGuiWindow* window,ImGuiAxis axis);
    CIMGUI_API ImGuiID igGetWindowResizeID(ImGuiWindow* window,int n);
    CIMGUI_API void igSeparatorEx(ImGuiSeparatorFlags flags);
    CIMGUI_API bool igButtonBehavior(const ImRect bb,ImGuiID id,bool* out_hovered,bool* out_held,ImGuiButtonFlags flags);
    CIMGUI_API bool igDragBehavior(ImGuiID id,ImGuiDataType data_type,void* p_v,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
    CIMGUI_API bool igSliderBehavior(const ImRect bb,ImGuiID id,ImGuiDataType data_type,void* p_v,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags,ImRect* out_grab_bb);
    CIMGUI_API bool igSplitterBehavior(const ImRect bb,ImGuiID id,ImGuiAxis axis,float* size1,float* size2,float min_size1,float min_size2,float hover_extend,float hover_visibility_delay);
    CIMGUI_API bool igTreeNodeBehavior(ImGuiID id,ImGuiTreeNodeFlags flags,const char* label,const char* label_end);
    CIMGUI_API bool igTreeNodeBehaviorIsOpen(ImGuiID id,ImGuiTreeNodeFlags flags);
    CIMGUI_API void igTreePushOverrideID(ImGuiID id);
    CIMGUI_API const ImGuiDataTypeInfo* igDataTypeGetInfo(ImGuiDataType data_type);
    CIMGUI_API int igDataTypeFormatString(char* buf,int buf_size,ImGuiDataType data_type,const void* p_data,const char* format);
    CIMGUI_API void igDataTypeApplyOp(ImGuiDataType data_type,int op,void* output,void* arg_1,const void* arg_2);
    CIMGUI_API bool igDataTypeApplyOpFromText(const char* buf,const char* initial_value_buf,ImGuiDataType data_type,void* p_data,const char* format);
    CIMGUI_API bool igDataTypeClamp(ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max);
    CIMGUI_API bool igInputTextEx(const char* label,const char* hint,char* buf,int buf_size,const ImVec2 size_arg,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
    CIMGUI_API bool igTempInputText(const ImRect bb,ImGuiID id,const char* label,char* buf,int buf_size,ImGuiInputTextFlags flags);
    CIMGUI_API bool igTempInputScalar(const ImRect bb,ImGuiID id,const char* label,ImGuiDataType data_type,void* p_data,const char* format,const void* p_clamp_min,const void* p_clamp_max);
    CIMGUI_API bool igTempInputIsActive(ImGuiID id);
    CIMGUI_API ImGuiInputTextState* igGetInputTextState(ImGuiID id);
    CIMGUI_API void igColorTooltip(const char* text,const float* col,ImGuiColorEditFlags flags);
    CIMGUI_API void igColorEditOptionsPopup(const float* col,ImGuiColorEditFlags flags);
    CIMGUI_API void igColorPickerOptionsPopup(const float* ref_col,ImGuiColorEditFlags flags);
    CIMGUI_API int igPlotEx(ImGuiPlotType plot_type,const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 frame_size);
    CIMGUI_API void igShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list,int vert_start_idx,int vert_end_idx,ImVec2 gradient_p0,ImVec2 gradient_p1,ImU32 col0,ImU32 col1);
    CIMGUI_API void igShadeVertsLinearUV(ImDrawList* draw_list,int vert_start_idx,int vert_end_idx,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,bool clamp);
    CIMGUI_API void igGcCompactTransientWindowBuffers(ImGuiWindow* window);
    CIMGUI_API void igGcAwakeTransientWindowBuffers(ImGuiWindow* window);
    CIMGUI_API void igDebugDrawItemRect(ImU32 col);
    CIMGUI_API void igDebugStartItemPicker(void);
    CIMGUI_API bool igImFontAtlasBuildWithStbTruetype(ImFontAtlas* atlas);
    CIMGUI_API void igImFontAtlasBuildInit(ImFontAtlas* atlas);
    CIMGUI_API void igImFontAtlasBuildSetupFont(ImFontAtlas* atlas,ImFont* font,ImFontConfig* font_config,float ascent,float descent);
    CIMGUI_API void igImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas,void* stbrp_context_opaque);
    CIMGUI_API void igImFontAtlasBuildFinish(ImFontAtlas* atlas);
    CIMGUI_API void igImFontAtlasBuildRender1bppRectFromString(ImFontAtlas* atlas,int atlas_x,int atlas_y,int w,int h,const char* in_str,char in_marker_char,unsigned char in_marker_pixel_value);
    CIMGUI_API void igImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256],float in_multiply_factor);
    CIMGUI_API void igImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256],unsigned char* pixels,int x,int y,int w,int h,int stride);


    /////////////////////////hand written functions
    //no LogTextV
    CIMGUI_API void igLogText(CONST char *fmt, ...);
    //no appendfV
    CIMGUI_API void ImGuiTextBuffer_appendf(struct ImGuiTextBuffer *buffer, const char *fmt, ...);
    //for getting FLT_MAX in bindings
    CIMGUI_API float igGET_FLT_MAX();


    CIMGUI_API ImVector_ImWchar* ImVector_ImWchar_create();
    CIMGUI_API void ImVector_ImWchar_destroy(ImVector_ImWchar* self);
    CIMGUI_API void ImVector_ImWchar_Init(ImVector_ImWchar* p);
    CIMGUI_API void ImVector_ImWchar_UnInit(ImVector_ImWchar* p);
}